//----------------------------------------------------------------------------
//      _____
//     *     *
//    *____   *____
//   * *===*   *==*
//  *___*===*___**  AVNET
//       *======*
//        *====*
//----------------------------------------------------------------------------
//
// This design is the property of Avnet.  Publication of this
// design is not authorized without written consent from Avnet.
//
// Please direct any questions to:  technical.support@avnet.com
//
// Disclaimer:
//    Avnet, Inc. makes no warranty for the use of this code or design.
//    This code is provided  "As Is". Avnet, Inc assumes no responsibility for
//    any errors, which may appear in this code, nor does it make a commitment
//    to update the information contained herein. Avnet, Inc specifically
//    disclaims any implied warranties of fitness for a particular purpose.
//                     Copyright(c) 2013 Avnet, Inc.
//                             All rights reserved.
//
//----------------------------------------------------------------------------
//
// Create Date:         Oct 25, 2013
// Design Name:         LED Dimmer Application
// Module Name:         main.c
// Project Name:        Zynq Software SpeedWay
// Target Devices:      Zynq-7000
// Hardware Boards:     MicroZed/ZedBoard
//
// Tool versions:       Vivado/SDK 2013.3
//
// Description:         Zed LED Dimmer Example
//
// Dependencies:
//
// Revision:            Oct 25, 2013: 1.00 Initial version
//
//----------------------------------------------------------------------------

/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xil_io.h"
#include "xstatus.h"
#include "xscugic.h"
#include "xil_exception.h"

/************************** Constant Definitions *****************************/
/*
 * The following constant maps to the name of the hardware instances that
 * were created in the EDK XPS system.
 */
//#define PWM_BASE_ADDRESS 0x43C00000

/* The following definitions are related to handling interrupts from the  * PWM controller. */
//#define XPAR_PS7_SCUGIC_0_DEVICE_ID    0
#define INTC_PWM_INTERRUPT_ID           XPAR_FABRIC_IP_AXI_ADC_0_HWP_INTERRUPT_INTR
#define INTC                           XScuGic
#define INTC_HANDLER                   XScuGic_InterruptHandler
#define INTC_DEVICE_ID                 XPAR_PS7_SCUGIC_0_DEVICE_ID

/************************** Variable Definitions *****************************/
/* LED brightness level is now global to make is visible to the ISR. */
volatile u32 brightness;
/* The Instance of the Interrupt Controller Driver */
static INTC Intc;
/*
 * The following are declared globally so they are zeroed and so they are
 * easily accessible from a debugger
 */
void PWMIsr(void *InstancePtr)
{
	/* Inform the user that an invalid value was detected by the PWM
	 * * controller. */
	print("PWM Value exceeded, brightness reset to zero. Enter new value: \r\n");
     /* Set the brightness value to a safe value and write it to the
      * * PWM controller in order to clear the pending interrupt. */
//	brightness = 0;
//	Xil_Out32(XPAR_IP_AXI_LEDS_1_DEVICE_ID, brightness);
}
/****************************************************************************/
/**
 * * This function sets up the interrupt system for the PWM dimmer controller.
 * * The processing contained in this function assumes the hardware system was
 * * built with an interrupt controller.
 * * * @param None. * * @return A status indicating XST_SUCCESS or a value that is contained in
 * *  xstatus.h. *
 * * @note  None.
 * * *****************************************************************************/
int SetupInterruptSystem()
{
	int result;
	INTC *IntcInstancePtr = &Intc;
     XScuGic_Config *IntcConfig;
     /* Initialize the interrupt controller driver so that it is ready to
      * * use. */
     IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
     if (IntcConfig == NULL)
     {
    	 return XST_FAILURE;
     }
     xil_printf("XScuGic_LookupConfig\n\r");
     /* Initialize the SCU and GIC to enable the desired interrupt
      * * configuration. */
     result = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
    		 IntcConfig->CpuBaseAddress);
     if (result != XST_SUCCESS)
     {
    	 return XST_FAILURE;
     }
     xil_printf("XScuGic_CfgInitialize\n\r");
     XScuGic_SetPriorityTriggerType(IntcInstancePtr, INTC_PWM_INTERRUPT_ID,
    		 0x00, 0x3);
     /* Connect the interrupt handler that will be called when an
      *       * interrupt occurs for the device. */
     result = XScuGic_Connect(IntcInstancePtr, INTC_PWM_INTERRUPT_ID,
    		 (Xil_ExceptionHandler) PWMIsr, 0);
     if (result != XST_SUCCESS)
     {
    	 return result;
     }
     xil_printf("XScuGic_Connect\n\r");
     /* Enable the interrupt for the PWM controller device. */
     XScuGic_Enable(IntcInstancePtr, INTC_PWM_INTERRUPT_ID);
     /* Initialize the exception table and register the interrupt controller
      *       * handler with the exception table. */
     Xil_ExceptionInit();
     Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
    		 (Xil_ExceptionHandler)INTC_HANDLER, IntcInstancePtr);
     /* Enable non-critical exceptions */
     Xil_ExceptionEnable();
     xil_printf("Xil_ExceptionInit\n\r");
     return XST_SUCCESS;

}
/************************** Main Code Entry **********************************/
int main(void)
{
//    int status = XST_SUCCESS;
//    u32 value = 0;
//    u32 period = 0;
    int Count = 0;
    int latch = 0;
    int coef = 4;
//    u32 brightness = 0;
//
//    /* Initialize the LED Dimmer controller to a safe PWM value. */
//    Xil_Out32(PWM_BASE_ADDRESS, 0);
//    /* Setup the interrupts such that interrupt processing can occur.  If an
//     *       * error occurs while setting up interrupts, then exit the application. */
//    status = SetupInterruptSystem();
    SetupInterruptSystem();
//    if (status != XST_SUCCESS)
//    {
//    	return XST_FAILURE;
//    }

    /* Now that the hardware has been initialized, continuously loop while
     * prompting the user for updates to the brightness level. */



    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 22*coef, 0x00000000);				// Закрыть все ключи IP_AXI_PWM (PWMstarting)
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR, 0x0000000B);

    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 1*coef, 0x00000000);			// Разрешение работы тормозных резисторов
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 2*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskChGroup0)
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 3*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskChGroup1)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 4*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskChGroup2 - резерв)
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 5*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskMinTimeErrorGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 6*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskMinTimeErrorGroup1 - резерв)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 7*coef, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0 (MaskMinTimeErrorGroup2 - резерв) - избыточна
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 8*coef, 0x00000000);			// время Inverter_3lvl_wrapper_0 (DeadTimeGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 9*coef, 0x00000000);			// время Inverter_3lvl_wrapper_0 (DeadTimeGroup1 - резерв)
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 10*coef, 0x00000000);			// время Inverter_3lvl_wrapper_0 (MinTimeGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 11*coef, 0x00000000);			// время Inverter_3lvl_wrapper_0 (MinTimeGroup1 - резерв)
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 12*coef, 0x00000000);			// активация защиты по ответу AckChecker_wrapper_0 (AcknowledgeProtectionEnableGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 13*coef, 0x00000000);			// активация защиты по ответу AckChecker_wrapper_0 (AcknowledgeProtectionEnableGroup1 - резерв)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 14*coef, 0x00000000);			// активация защиты по ответу AckChecker_wrapper_0 (AcknowledgeProtectionEnableGroup2 - резерв) - избыточна
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 15*coef, 0x00000000);			// активация токовой защиты AckChecker_wrapper_0 (CurrentProtectionEnableGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 16*coef, 0x00000000);			// активация токовой защиты AckChecker_wrapper_0 (CurrentProtectionEnableGroup1 - резерв)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 17*coef, 0x00000000);			// активация токовой защиты AckChecker_wrapper_0 (CurrentProtectionEnableGroup2 - резерв) - избыточна
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 18*coef, 0x00000000);			// маска защиты по ответу AckChecker_wrapper_0 (MaskAcknowledgeGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 19*coef, 0x00000000);			// маска защиты по ответу AckChecker_wrapper_0 (MaskAcknowledgeGroup1 - резерв)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 20*coef, 0x00000000);			// маска защиты по ответу AckChecker_wrapper_0 (MaskAcknowledgeGroup2 - резерв) - избыточна
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 21*coef, 0x00000000);			// маска токовой защиты AckChecker_wrapper_0 (MaskCurrentGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 22*coef, 0x00000000);			// маска токовой защиты AckChecker_wrapper_0 (MaskCurrentGroup1 - резерв)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 23*coef, 0x00000000);			// маска токовой защиты AckChecker_wrapper_0 (MaskCurrentGroup2 - резерв) - избыточна
    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 24*coef, 0x00000000);			// время AckChecker_wrapper_0 (AcknowledgeTimeGroup0)
    	//	Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 25*coef, 0x00000000);			// время AckChecker_wrapper_0 (AcknowledgeTimeGroup1 - резерв) - избыточна

    		Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR, 0x80000004);						// Error0 <= slv_reg0(0);
    																							// MinTimeEnable <= slv_reg0(1);
    																							// Ready <= slv_reg0(2);
    																							// Reset <= slv_reg0(3);
    																							// start <= slv_reg0(31); изменения вступают в силу после установки этого бита

    		for (int i = 0; i < 16; i++) {
    			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + i*coef, 0x000FFFFF+i*0x00100000);			// нулевые значения счетчиков для IP_AXI_PWM (регистры 0-15)
    		}

    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 16*coef, 0x0000FFFF);				// направление пилы для IP_AXI_PWM (PWMdirection)
    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 17*coef, 0x01000000);				// счетчик пилы для IP_AXI_PWM (PWMcounterMax)
    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 18*coef, 0x00000000);				// источник ШИМА для IP_AXI_PWM (PWMsource) 0 - ШИМ от генератора IP_AXI_PWM, 1 - ШИМ из регистра, предназначенного для ШИМ контроллера, 2 - прямое управление ключами из соответствующего регистра
    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 19*coef, 0x00000000);				// ШИМ от контроллера для IP_AXI_PWM (PWMfromCPU) - обнуление задания
    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 20*coef, 0x00000000);

    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 21*coef, 0x00000000);
    		Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 22*coef, 0x00000001);


    while (1)
    {
    	if (Count < 1000000000) {
    		Count++;
    	} else {
    		if (latch) {
    			Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000000);
    			latch = 0;
    		} else {
    			Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000001);
    			latch = 1;
    		}
//    		xil_printf("%d\n\r", 5);
    		xil_printf("%d\n\r", Xil_In32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 0*coef));
    		xil_printf("%d\n\r", Xil_In32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + 1*coef));
        /* Prompt the user to select a brightness value ranging from
         * 0 to 9. */
//        print("Select a Brightness between 0 and 9\n\r");
        Count = 0;
    	}

        /* Read an input value from the console. */
//        value = XUartPs_RecvByte(0);
//        period = value - 0x30;
        /* Convert the input ASCII character to an integer value. */
//        xil_printf("Brightness Level %d selected\n\r", value);
//        if ((int)value < 12) Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000000); else Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000001);

        /* Print the input value back to the console to provide some
         * feedback to the user. */
//        xil_printf("Brightness Level %d selected\n\r", period);

        /* Since the LED width is 1e6 clk cycles, we need to normalize
         * the period to that clk.  Since we accept values 0-9, that will
         * scale period from 0-999,000.  0 turns off LEDs, 999,000 is full
         * brightness. */
//        brightness = 0;

        /* Write the duty_cycle width (Period) out to the PL PWM
         * peripheral. */
//        Xil_Out32(PWM_BASE_ADDRESS, brightness);
    }

//    return status;
}
