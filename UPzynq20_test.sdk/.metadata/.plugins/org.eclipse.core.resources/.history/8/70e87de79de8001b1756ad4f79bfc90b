/******************************************************************************
 *
 * Copyright (C) 2010 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/
/****************************************************************************/
/**
 *
 * @file		xuartps_intr_example.c
 *
 * This file contains a design example using the XUartPs driver in interrupt
 * mode. It sends data and expects to receive the same data through the device
 * using the local loopback mode.
 *
 *
 * @note
 * The example contains an infinite loop such that if interrupts are not
 * working it may hang.
 *
 * MODIFICATION HISTORY:
 * <pre>
 * Ver   Who    Date     Changes
 * ----- ------ -------- ----------------------------------------------
 * 1.00a  drg/jz 01/13/10 First Release
 * 1.00a  sdm    05/25/11 Modified the example for supporting Peripheral tests
 *		        in SDK
 * 1.03a  sg     07/16/12 Updated the example for CR 666306. Modified
 *			the device ID to use the first Device Id
 *			and increased the receive timeout to 8
 *			Removed the printf at the start of the main
 *			Put the device normal mode at the end of the example
 * 3.1	kvn		04/10/15 Added code to support Zynq Ultrascale+ MP.
 * 3.1   mus     01/14/16 Added support for intc interrupt controller
 *
 * </pre>
 ****************************************************************************/

/***************************** Include Files *******************************/

#include "xparameters.h"
#include "xgpio.h"
#include "xplatform_info.h"
//#include "xuartps.h"
//#include "xil_exception.h"
#include "xil_printf.h"
#include "project_parameters.h"
#include "test_functions.h"
#include "module_uart_RS485.h"
#include "module_uart_SET12.h"
#include "test_functions_PS_MIO.h"
#include "current_system_status.h"

int Count;						// общий счеткчик
int Count_Div;						// общий счеткчик
int Count_Div2;
int Channel_0;					// счетчик аналоговых сигналов для каналов 0-15
int Channel_1;					// счетчик аналоговых сигналов для каналов 16-31
int Channel_2 = 0;					// счетчик регистров ШИМ
int Channel_3 = 5;					// счетчик регистров ШИМ
u32 PWM = 0;
int j = 4;
int count_RS485 = 0;
u32 DataBuf;
u32 DataBufPrev;

u32 CountErrWarnInfo = 48;
u32 GroupsRegisters = 0;

u32 DataErrWarnInfo = 0;

int latch = 0;
int latch_start = 0;

int i = 0;

int main(void) {

	initialization_of_project(0, 0);    	// A0 - SYSTEM_DESIGN, A1 - PROJECT_NUMBER
	initialization_of_MIO();				// Иницилизируем PSGPIO
	SetOutputEnablePinPSGPIO(0, 1);			// Разрешаем подтяжку MIO0, нельзя подтянуть MIO7
	SetOutputEnablePinPSGPIO(15, 1);		// Разрешаем подтяжку MIO15 для управления направлением RS-485 преобразователем
	SetDirectionPinPSGPIO(0, 1);			// Выбираем направление MIO0
	SetDirectionPinPSGPIO(7, 1);			// Выбираем направление MIO7
	SetDirectionPinPSGPIO(15, 1);			// Выбираем направление MIO15
//
	SetDirectionPinPSGPIO(46, 0);			// Выбираем направление MIO46
	SetDirectionPinPSGPIO(47, 0);			// Выбираем направление MIO47
	SetDirectionPinPSGPIO(48, 0);			// Выбираем направление MIO48
	SetDirectionPinPSGPIO(49, 0);			// Выбираем направление MIO49

	initialization_of_UART_SET12(); 				// инициализируем UART
	initialization_of_UART_RS485(); 		// инициализируем UART-RS485
	WritePinPSGPIO (15, 1);


	array_current_status_set(544, 0);
//
//	array_current_status_set(544, 1);

	preparing_message_RS485(2, 15, 544, 1, 2);

	while (1) {

		if (Count < 50000000) {
			Count++;
		} else {
			if (latch) {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000000);
				latch = 0;
				//write_out(17);
				//inverting_the_signal_count_transmitter();
				WritePinPSGPIO (0, 1);
				WritePinPSGPIO (7, 0);
//				bild_send_buffer_RS485(4, 65280);
			} else {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000001);
				latch = 1;
				//write_out(4);
				//inverting_the_signal_count_transmitter();
//				XGpioPs_WritePin(&gpio_instance, 0, 0);
				WritePinPSGPIO (0, 0);
				WritePinPSGPIO (7, 1);
//				bild_send_buffer_RS485(4, 0);
			}

			WritePinPSGPIO(15, 1);

//			bild_send_buffer_SET12(144, ReadPinPSGPIO(46));
//			bild_send_buffer_SET12(146, ReadPinPSGPIO(47));
//			bild_send_buffer_SET12(148, ReadPinPSGPIO(48));
////		bild_send_buffer_SET12(150, ReadPinPSGPIO(49));

//			bild_send_buffer_SET12(150, function_test_CountInt_RS485());


			Count = 0;
			inverting_the_signal_count_transmitter_SET12();
			bild_send_buffer_SET12(TEST_BUFFER_SIZE_SET12-1, 100);
//			GroupsRegisters++;
//			bild_send_buffer(8, GroupsRegisters);




			bild_send_buffer_SET12(162, Xil_In32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + 20));




			read_in_all_SET12();
			bild_send_buffer_SET12(112+Channel_0*2, Xil_In32(XPAR_IP_AXI_ADC_0_S00_AXI_BASEADDR + (Channel_0*j)));
			if (Channel_0<15) Channel_0++; else Channel_0 = 0;



			Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 1*j, 0x0000FFFF);			// Разрешение работы тормозных резисторов
			Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 2*j, 0x00000000);			// маска на выходе Inverter_3lvl_wrapper_0
			Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 0*j, 0x80000004);			// Error0 <= slv_reg0(0);
																							// MinTimeEnable <= slv_reg0(1);
																							// Ready <= slv_reg0(2);
																							// Reset <= slv_reg0(3);
																							// start <= slv_reg0(31); изменения вступают в силу после установки этого бита


			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00FFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00EFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00DFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00CFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00BFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00AFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x009FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x008FFFFF);
			Channel_2++;

			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x007FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x006FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x005FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x004FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x003FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x002FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x001FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000FFFFF);
			Channel_2++;

//			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000FFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000EFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000DFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000CFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000BFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000AFFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0009FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0008FFFF);
//						Channel_2++;
//
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0007FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0006FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0005FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0004FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0003FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0002FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0001FFFF);
//						Channel_2++;
//						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0000FFFF);
//						Channel_2++;

			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x01000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), PWM);
			Channel_2++;
			PWM++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0xFFFF0000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000001);
			Channel_2 = 0;


			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000000);
			Channel_3 = 0;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F07751);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F00000);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F03200);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00FFFF00);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), PWM);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000001);

//			bild_send_buffer(22, XGpio_DiscreteRead(&Gpio_6, 1));

//			read_in(&DataBuf);
//			if (DataBufPrev != DataBuf) {
//				bild_send_buffer(22, DataBuf);
//				//bild_send_buffer(30, DataBuf);
//			}
//			DataBufPrev = DataBuf;

//			bild_send_buffer_RS485(0, 517);
//			bild_send_buffer_RS485(2, 544);

//			if (count_RS485 < 5) {
//				write_multiple_coils(count_RS485);
//				terminal_uart_send_RS485();
//				count_RS485++;
//			} else {
//				write_multiple_coils(count_RS485);
//				terminal_uart_send_RS485();
//								count_RS485 = 0;
//			}



			if (Count_Div2 < 11) {
				bild_send_buffer_RS485(181, Count_Div2);
				preparing_message_RS485(2, 16, 1, 100, 200);
				Count_Div2++;
				array_current_status_set(544, 0);
			} else {
				Count_Div2=0;
				array_current_status_set(544, 1);
				preparing_message_RS485(2, 15, 544, 1, 2);
			}







			if (latch_start==0) bild_send_buffer_SET12(TEST_BUFFER_SIZE_SET12-3, 1); else bild_send_buffer_SET12(TEST_BUFFER_SIZE_SET12-3, 0);
			latch_start = 1;
			terminal_uart_send_SET12();

			WritePinPSGPIO(15, 0);

			terminal_uart_recv_SET12();
			update_from_terminal_all_SET12(TEST_BUFFER_SIZE_SET12);

//			bild_send_buffer_SET12(144, terminal_uart_send_RS485());

			/////

//			bild_send_buffer_SET12(144, update_from_terminal_RS485(0));
//			bild_send_buffer_SET12(146, update_from_terminal_RS485(1));
//			bild_send_buffer_SET12(148, update_from_terminal_RS485(2));
//			bild_send_buffer_SET12(150, update_from_terminal_RS485(3));
//			bild_send_buffer_SET12(152, update_from_terminal_RS485(4));
//			bild_send_buffer_SET12(154, update_from_terminal_RS485(5));
//			bild_send_buffer_SET12(156, update_from_terminal_RS485(6));
//			bild_send_buffer_SET12(158, update_from_terminal_RS485(7));



//			terminal_uart_recv_RS485();

//			if (terminal_uart_recv()==0) {
//				update_from_terminal_all(TEST_BUFFER_SIZE);
//			}

			//write_out(update_from_terminal(26));

		}
	}
}

