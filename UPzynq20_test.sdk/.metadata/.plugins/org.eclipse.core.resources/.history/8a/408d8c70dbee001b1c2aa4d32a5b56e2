/******************************************************************************
 *
 * Copyright (C) 2010 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/
/****************************************************************************/
/**
 *
 * @file		xuartps_intr_example.c
 *
 * This file contains a design example using the XUartPs driver in interrupt
 * mode. It sends data and expects to receive the same data through the device
 * using the local loopback mode.
 *
 *
 * @note
 * The example contains an infinite loop such that if interrupts are not
 * working it may hang.
 *
 * MODIFICATION HISTORY:
 * <pre>
 * Ver   Who    Date     Changes
 * ----- ------ -------- ----------------------------------------------
 * 1.00a  drg/jz 01/13/10 First Release
 * 1.00a  sdm    05/25/11 Modified the example for supporting Peripheral tests
 *		        in SDK
 * 1.03a  sg     07/16/12 Updated the example for CR 666306. Modified
 *			the device ID to use the first Device Id
 *			and increased the receive timeout to 8
 *			Removed the printf at the start of the main
 *			Put the device normal mode at the end of the example
 * 3.1	kvn		04/10/15 Added code to support Zynq Ultrascale+ MP.
 * 3.1   mus     01/14/16 Added support for intc interrupt controller
 *
 * </pre>
 ****************************************************************************/

/***************************** Include Files *******************************/

#include "xparameters.h"
#include "xgpio.h"
#include "xplatform_info.h"
//#include "xuartps.h"
//#include "xil_exception.h"
#include "xil_printf.h"
#include "project_parameters.h"
#include "test_functions.h"
#include "module_uart_RS485.h"
#include "module_uart_SET12.h"
#include "test_functions_PS_MIO.h"
#include "current_system_status.h"
#include "adc.h"
#include "encoder.h"
#include "logical_functions.h"

int Count;						// общий счеткчик
int Count_Div = 0;						// общий счеткчик
int Count_Div2;
int Channel_0 = 0;					// счетчик аналоговых сигналов для каналов 0-15
int Channel_1 = 12000;					// счетчик аналоговых сигналов для каналов 16-31
int Channel_2 = 0;					// счетчик регистров ШИМ
int Channel_3 = 5;					// счетчик регистров ШИМ
u32 PWM = 0;
int j = 4;
int count_RS485 = 0;
u32 DataBuf;
u32 DataBufPrev;

u32 CountErrWarnInfo = 48;
u32 GroupsRegisters = 0;

u32 DataErrWarnInfo = 0;

int latch = 0;
int latch_start = 0;

int i = 0;

int main(void) {

	initialization_system_design_and_project(0, 0);    		// A0 - SYSTEM_DESIGN, A1 - PROJECT_NUMBER
	initialization_initial_values();						// считывание начальных значений

//	for (int i = 1; i < 16; i++) {
//		bild_send_buffer_SET12(174-i*2, (Channel_1 >> i) & 1);
//	}

//	loading_control_panel(Count_Div);
	while (1) {
		if (Count < 500000000) {
			Count++;
		} else {
			if (latch) {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000000);
				latch = 0;
				set_current_value_PSGPIO(0, 1);
				set_current_value_PSGPIO(7, 0);
//				set_current_value_PSGPIO(15, 1);
//				preparing_message_RS485(2, 15, 1, 576, 72);
//				preparing_message_RS485(2, 15, 533, 16, 2);
//				preparing_message_RS485(2, 15, 513, 16, 2);
			} else {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000001);
				latch = 1;
				set_current_value_PSGPIO(0, 0);
				set_current_value_PSGPIO(7, 1);
//				set_current_value_PSGPIO(15, 1);
//				preparing_message_RS485(2, 15, 533, 16, 2);
//				preparing_message_RS485(2, 15, 515, 1, 2);
//				preparing_message_RS485(2, 16, 1, 100, 200);
			}
			Count = 0;

//			set_current_value_PSGPIO(15, 1);


			if (loading_control_panel(Count_Div) == 0) {
				Count_Div++;
			} else {
				set_current_value_PSGPIO(15, 1);
				preparing_message_RS485(2, 16, 1, 100, 200);
			}
//			set_array_current_status_bool(544, 1);

			set_array_current_status_int(0, 1);
			set_array_current_status_int(1, 1);

			u32 Status_ADC = get_value_errors_negative_positive_adc_table(2);

			for (int i = 10; i < 23; i++){
				set_array_current_status_int(i, (Status_ADC >> i) & 1);
			}



















			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000000);
			Channel_3 = 0;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F07751);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F00000);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F03200);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00FFFF00);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), PWM);
			PWM++;
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000001);


			filling_in_the_system_status_data();








			if (latch_start==0) bild_send_buffer_SET12(TEST_BUFFER_SIZE_SET12-3, 1); else bild_send_buffer_SET12(TEST_BUFFER_SIZE_SET12-3, 0);
			latch_start = 1;
			preparing_message_SET12();
			terminal_uart_recv_SET12();
//			terminal_uart_recv_RS485();
			set_current_value_PSGPIO(15, 0);

		}
	}
}





//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00FFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00EFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00DFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00CFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00BFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00AFFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x009FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x008FFFFF);
//Channel_2++;
//
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x007FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x006FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x005FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x004FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x003FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x002FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x001FFFFF);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000FFFFF);
//Channel_2++;
//
////			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000FFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000EFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000DFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000CFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000BFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000AFFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0009FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0008FFFF);
////						Channel_2++;
////
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0007FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0006FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0005FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0004FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0003FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0002FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0001FFFF);
////						Channel_2++;
////						Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x0000FFFF);
////						Channel_2++;
//
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x01000000);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), PWM);
//Channel_2++;
//PWM++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0xFFFF0000);
//Channel_2++;
//Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
//Channel_2 = 0;
//
//



