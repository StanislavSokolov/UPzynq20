/******************************************************************************
 *
 * Copyright (C) 2010 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/
/****************************************************************************/
/**
 *
 * @file		xuartps_intr_example.c
 *
 * This file contains a design example using the XUartPs driver in interrupt
 * mode. It sends data and expects to receive the same data through the device
 * using the local loopback mode.
 *
 *
 * @note
 * The example contains an infinite loop such that if interrupts are not
 * working it may hang.
 *
 * MODIFICATION HISTORY:
 * <pre>
 * Ver   Who    Date     Changes
 * ----- ------ -------- ----------------------------------------------
 * 1.00a  drg/jz 01/13/10 First Release
 * 1.00a  sdm    05/25/11 Modified the example for supporting Peripheral tests
 *		        in SDK
 * 1.03a  sg     07/16/12 Updated the example for CR 666306. Modified
 *			the device ID to use the first Device Id
 *			and increased the receive timeout to 8
 *			Removed the printf at the start of the main
 *			Put the device normal mode at the end of the example
 * 3.1	kvn		04/10/15 Added code to support Zynq Ultrascale+ MP.
 * 3.1   mus     01/14/16 Added support for intc interrupt controller
 *
 * </pre>
 ****************************************************************************/

/***************************** Include Files *******************************/

#include "xparameters.h"
#include "xgpio.h"
#include "xplatform_info.h"
//#include "xuartps.h"
//#include "xil_exception.h"
#include "xil_printf.h"
#include "project_parameters.h"
#include "test_functions.h"
#include "module_uart.h"
#include "test_functions_PS_MIO.h"

int Count;						// общий счеткчик
int Channel_0;					// счетчик аналоговых сигналов для каналов 0-15
int Channel_1;					// счетчик аналоговых сигналов для каналов 16-31
int Channel_2 = 0;					// счетчик регистров ШИМ
int Channel_3 = 5;					// счетчик регистров ШИМ
u32 PWM = 0;
int j = 4;
u32 DataBuf;
u32 DataBufPrev;

u32 CountErrWarnInfo = 48;
u32 GroupsRegisters = 0;

u32 DataErrWarnInfo = 0;

int latch = 0;
int latch_start = 0;

int main(void) {

	initialization_of_project(0, 0);    // A0 - SYSTEM_DESIGN, A1 - PROJECT_NUMBER
	initialization_of_MIO();			// Иницилизируем PSGPIO
	SetOutputEnablePinPSGPIO(0, 1);		// Разрешаем подтяжку MIO0, нельзя подтянуть MIO7
	SetDirectionPinPSGPIO(0, 1);		// Выбираем направление MIO0
	SetDirectionPinPSGPIO(7, 1);		// Выбираем направление MIO7
	initialization_of_UART(); 			// инициализируем UART

	while (1) {

		if (Count < 10000000) {
			Count++;
		} else {
			if (latch) {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000000);
				latch = 0;
				//write_out(17);
				//inverting_the_signal_count_transmitter();
				WritePinPSGPIO (0, 1);
				WritePinPSGPIO (7, 0);
			} else {
				Xil_Out32(XPAR_IP_AXI_LEDS_0_S00_AXI_BASEADDR, 0x00000001);
				latch = 1;
				//write_out(4);
				//inverting_the_signal_count_transmitter();
//				XGpioPs_WritePin(&gpio_instance, 0, 0);
				WritePinPSGPIO (0, 0);
				WritePinPSGPIO (7, 1);
			}





			Count = 0;
			inverting_the_signal_count_transmitter();
			bild_send_buffer(TEST_BUFFER_SIZE-1, 100);
//			GroupsRegisters++;
//			bild_send_buffer(8, GroupsRegisters);




			bild_send_buffer(162, Xil_In32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + 20));




			read_in_all();
			bild_send_buffer(112+Channel_0*2, Xil_In32(XPAR_IP_AXI_ADC_0_S00_AXI_BASEADDR + (Channel_0*j)));
			if (Channel_0<15) Channel_0++; else Channel_0 = 0;
//			bild_send_buffer(144+Channel_1*2, Xil_In32(XPAR_IP_AXI_ENCODER_0_S00_AXI_BASEADDR + (Channel_1*j)));
//			if (Channel_1<5) Channel_1++; else Channel_1 = 0;
			bild_send_buffer(144+Channel_1*2, Xil_In32(XPAR_IP_AXI_ENCODER_0_S00_AXI_BASEADDR + (Channel_1*j)));
//			bild_send_buffer(154+Channel_1*2, (Xil_In32(XPAR_IP_AXI_ENCODER_0_S00_AXI_BASEADDR + (Channel_1*j)))/65534);
			if (Channel_1<7) Channel_1++; else Channel_1 = 0;



			Xil_Out32(XPAR_IP_AXI_INVERTER_0_S00_AXI_BASEADDR + 3*j, 0xFF0000FF);



			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00FFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00EFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00DFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00CFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00BFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00AFFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x009FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x008FFFFF);
			Channel_2++;

			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x007FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x006FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x005FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x004FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x003FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x002FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x001FFFFF);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x000FFFFF);
			Channel_2++;

			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x01000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), PWM);
			Channel_2++;
			PWM++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0xFFFF0000);
			Channel_2++;
			Xil_Out32(XPAR_IP_AXI_PWM_0_S00_AXI_BASEADDR + (Channel_2*j), 0x00000001);
			Channel_2 = 0;


			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000000);
			Channel_3 = 0;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F07750);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F00000);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x70F03200);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00FFFF00);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), PWM);
			Channel_3++;
			Xil_Out32(XPAR_IP_AXI_OPTICALBUS_0_S00_AXI_BASEADDR + (Channel_3*j), 0x00000001);

//			bild_send_buffer(22, XGpio_DiscreteRead(&Gpio_6, 1));

//			read_in(&DataBuf);
//			if (DataBufPrev != DataBuf) {
//				bild_send_buffer(22, DataBuf);
//				//bild_send_buffer(30, DataBuf);
//			}
//			DataBufPrev = DataBuf;

			if (latch_start==0) bild_send_buffer(TEST_BUFFER_SIZE-3, 1); else bild_send_buffer(TEST_BUFFER_SIZE-3, 0);
			latch_start = 1;
			terminal_uart_send();
			terminal_uart_recv();
			update_from_terminal_all(TEST_BUFFER_SIZE);

//			if (terminal_uart_recv()==0) {
//				update_from_terminal_all(TEST_BUFFER_SIZE);
//			}

			//write_out(update_from_terminal(26));

		}
	}
}

